name: Build and Push Docker Image to GHCR

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (default: latest)'
        required: false
        default: 'latest'
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'context/**'
      - '.github/workflows/docker-release.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  # Get ACL2 commit hash and determine image tag - shared across all jobs
  prepare:
    runs-on: ubuntu-latest
    outputs:
      acl2-commit: ${{ steps.acl2-commit.outputs.commit }}
      image-tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Get ACL2 commit hash
        id: acl2-commit
        run: |
          ACL2_COMMIT=$(curl --silent https://api.github.com/repos/acl2/acl2/commits/master | jq -r .sha)
          echo "commit=$ACL2_COMMIT" >> $GITHUB_OUTPUT
          echo "ACL2 commit: $ACL2_COMMIT"

      - name: Determine image tag
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="latest"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Image tag: $TAG"

  # Build AMD64 image on native runner
  build-amd64:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: context
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-amd64
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=A Docker image for running the ACL2 theorem proving system and books in JupyterLab
            org.opencontainers.image.licenses=MIT
          build-args: |
            BASE_IMAGE=quay.io/jupyter/minimal-notebook:latest
            ACL2_COMMIT=${{ needs.prepare.outputs.acl2-commit }}
            ACL2_CERTIFY_OPTS=-j 6
            ACL2_CERTIFY_TARGETS=basic
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  # Build ARM64 image on native arm64 runner
  build-arm64:
    needs: prepare
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: context
          file: Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-arm64
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=A Docker image for running the ACL2 theorem proving system and books in JupyterLab
            org.opencontainers.image.licenses=MIT
          build-args: |
            BASE_IMAGE=quay.io/jupyter/minimal-notebook:latest
            ACL2_COMMIT=${{ needs.prepare.outputs.acl2-commit }}
            ACL2_CERTIFY_OPTS=-j 6
            ACL2_CERTIFY_TARGETS=basic
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  # Create and push multiarch manifest
  create-manifest:
    needs: [prepare, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multiarch manifest
        run: |
          # Create manifest list with both platform images
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-arm64

          # If this is a push to main, also tag as latest
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-arm64
          fi

          # If this is a release, also create semver tags
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
            # Extract major.minor from version tag (assumes format vX.Y.Z)
            if [[ $TAG =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${MAJOR}.${MINOR} \
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-amd64 \
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}-arm64
            fi
          fi

      - name: Generate build summary
        run: |
          echo "## Docker Multiarch Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ needs.prepare.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**ACL2 Commit:** ${{ needs.prepare.outputs.acl2-commit }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This is a multiarch image supporting both amd64 and arm64. Docker will automatically pull the correct architecture for your system." >> $GITHUB_STEP_SUMMARY
